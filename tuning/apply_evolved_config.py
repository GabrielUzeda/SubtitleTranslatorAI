#!/usr/bin/env python3
"""
Script para aplicar configura√ß√£o evolu√≠da automaticamente ao translatorApi
"""

import json
import glob
import os
import sys
import subprocess

def find_best_evolved_config():
    """Encontra a melhor configura√ß√£o evolu√≠da"""
    config_files = glob.glob("best_config_evolved_*.json")
    if not config_files:
        print("‚ùå Nenhuma configura√ß√£o evolu√≠da encontrada!")
        return None
    
    # Pegar o mais recente
    latest_config = max(config_files, key=os.path.getctime)
    
    with open(latest_config, 'r') as f:
        data = json.load(f)
    
    print(f"üìÅ Configura√ß√£o encontrada: {latest_config}")
    print(f"üéØ Score: {data['fitness']:.2f}/10")
    print(f"üß¨ Testadas: {data['total_configs_tested']} configura√ß√µes")
    print(f"üîÑ Gera√ß√µes: {data['generations']}")
    
    return data['best_config']

def apply_config_to_translator_api(config):
    """Aplica configura√ß√£o ao translatorApi"""
    api_config_path = "../backend/translatorApi/config.json"
    
    # Mapear configura√ß√£o evolu√≠da para formato da API
    api_config = {
        "model": "tibellium/towerinstruct-mistral",
        "temperature": config['temperature'],
        "top_p": config['top_p'],
        "top_k": config['top_k'],
        "repeat_penalty": config['repeat_penalty'],
        "chunk_size": config['chunk_size'],
        "max_tokens": config['max_tokens']
    }
    
    # Determinar template baseado no prompt_template evolu√≠do
    template_map = {
        "contextual": "contextual",
        "precise": "precise", 
        "anime_focused": "cultural",
        "technical": "precise",
        "cultural": "cultural",
        "creative": "contextual"
    }
    
    template = template_map.get(config['prompt_template'], "precise")
    api_config['template'] = template
    
    # Salvar configura√ß√£o
    with open(api_config_path, 'w') as f:
        json.dump(api_config, f, indent=2)
    
    print(f"‚úÖ Configura√ß√£o aplicada ao translatorApi:")
    print(f"   Temperature: {config['temperature']:.3f}")
    print(f"   Top-p: {config['top_p']:.3f}")
    print(f"   Top-k: {config['top_k']}")
    print(f"   Repeat penalty: {config['repeat_penalty']:.3f}")
    print(f"   Chunk size: {config['chunk_size']}")
    print(f"   Template: {template}")
    
    return True

def restart_translator_service():
    """Reinicia o servi√ßo de tradu√ß√£o"""
    try:
        print("üîÑ Reiniciando servi√ßo de tradu√ß√£o...")
        
        # Parar e reiniciar o Docker Compose
        os.chdir("../backend")
        subprocess.run(["docker", "compose", "restart", "translator"], check=True)
        
        print("‚úÖ Servi√ßo reiniciado com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao reiniciar servi√ßo: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ APLICANDO CONFIGURA√á√ÉO EVOLU√çDA AO TRANSLATORAPI")
    print("=" * 60)
    
    # Encontrar melhor configura√ß√£o
    best_config = find_best_evolved_config()
    if not best_config:
        sys.exit(1)
    
    # Aplicar configura√ß√£o
    if apply_config_to_translator_api(best_config):
        # Reiniciar servi√ßo
        restart_translator_service()
        print("\nüéâ Configura√ß√£o evolu√≠da aplicada com sucesso!")
        print("üß™ Teste a nova configura√ß√£o com um arquivo MKV!")
    else:
        print("‚ùå Falha ao aplicar configura√ß√£o!")
        sys.exit(1) 